/smarter data/

if data gets nested, gets more 'complicated' make the data model simpler and smarter. normalize it, extract derived aspects. don't compensate with complicated selectors.


// reducers are semantic too.

// a state-slice need metadata?
// like loading/fetching/processing or error. nope! just save as promise! (????)


/ DATA /
The core of the application. The data model/shape, and _how it changes_.
Each data 'module' (better name?) consists of the schema (shape), reducer (how it changes/reacts to /semantic/ actions), and possibly selectors????? I'm still up in the air about selectors.


reducers should not care or know about 'async' actions. no fetching_ fetching_success fetching_error bullshit.

"login" means "login." reducer expects that shit to be taken care of by the time it sees the action. 


data vs state: data is the core, fundamental term. should be the most vague, encompassing expression. 'state' is an /instance/ of data. Data changes over time due to user interaction, interacting services, blah blah. the 'state' of the data is that snapshot of that point in time.


don't forget to codesplit this crap


DON'T put UI data associated with the core data. Todo "checked" is wrong. UI should be /computed/ (from within the react component) from a /domain/ datum. Todo 'completed' is semantic and UI-agnostic.

almost no UI should be put into redux state management. however, certain "global" UI: modals, error messages (?), color-theme can be put into the "UI" slice. or maybe they should just be in their own "slice". keep things normalized and flat.


Global state is easily an anti-pattern in the first place, so we should not fool ourselves into thinking we can just 'throw on redux' and everything is solved, then continue on our shitty OO patterns to design bad data models. if you're putting tons of shit into the global store, _it should feel like you're putting tons of shit into the global store_. You should see the 20 files in this folder. Don't hide that by artificially grouping things together into subfolders.

Same with actions. not all events have to be tracked in an ACTION, just the ones that are globally affecting, don't 'belong' to any visual component.


hoisting selectors and flattening them to an even playing field is /bad/ because it's not /semantic/. It's not idiomatic to the state.

selectSomethingArbitraryAndDeeplyNested(state) and
selectTodoList(state)

doesn't make sense that they're on the same level. if they are accessed by similar number of components, maybe the deeply nested part should actually be in its own highlevel 'slice.'

Instead of extra implementation to 'interface' or 'hide' the state shape/implementation from the components, /make a better data model/.

I suppose at the "enterprise-level", you \have\ to use selectors just like you \have\ to use typescript and semicolons.

It's silly to nest your state shape (per 'domainizing'), just to flatten their extraction again with selectors. just keep the original state flat in the first place then.

If something deeply nested is getting selected in isolation from it's immediate neighbors all the time, maybe it should be moved higher and into its own 'slice.' normalize.

your component pattern for withdrawing from state should feel like you only need to withdraw something shallowly, never deeply nested because you designed your state well. making selectors to obfuscate extracting deeply (poorly designed) data is adding extra implementation to bad initial design.


the point of global state is that everyone can access it, so don't kid yourself by nesting shit and 'grouping' stuff.

I JUST FOUND THIS:
“In fact, I’m a huge proponent of designing your code around the data, rather than the other way around…Bad programmers worry about the code. Good programmers worry about data structures and their relationships.”
— Linus Torvalds

exactly!!!









byID pattern? what else woudl it be "by?" other than "allIDs". maybe like queries on a database table? but then duplicate data? so then getters to compute? and memoized?








immutablejs doesn't support 'getters', or computed/derived properties.




folder is 'reducer' because it's a single rootReducer at the end.

no, reducers. because each reducer can be standalone, just like components.



also, no nested reducers --> combine reducers. the point of combining is to flatten, so file structure should reflect that. as always...keep things flat.




so no selectors, use getters for derived properties. makes things more semantic, simpler.


no combining at the index.js. its' the responsibility of the /user/ to combine if needed.
